#!/bin/bash -x

# Prerequisites:
#- Python installed
#- Git installed
#- biocentre utils package downloaded and installed in /some/dir/

biocentre_utils_dir="$HOME/biocentre_install_files"
biocentre_project_dir="$WORKON_HOME"

echo $biocentre_utils_dir
echo $biocentre_project_dir
existing_project=false
if [[ $# -gt 1 ]]; then
    existing_project=true
fi

# Requirements:
# - Download python 2.7.11 with requirements for this virtualenv. Maybe it is sufficient to download/install it once
# and then point to the location of the binary

# Python 2.7.11 dependencies
sudo apt-get install -y \
autotools-dev      \
blt-dev            \
bzip2              \
dpkg-dev           \
g++-multilib       \
gcc-multilib       \
libbluetooth-dev   \
libbz2-dev         \
libexpat1-dev      \
libffi-dev         \
libffi6            \
libffi6-dbg        \
libgdbm-dev        \
libgpm2            \
libncursesw5-dev   \
libreadline-dev    \
libsqlite3-dev     \
libssl-dev         \
libtinfo-dev       \
mime-support       \
net-tools          \
netbase            \
python-crypto      \
python-mox3        \
python-pil         \
python-ply         \
quilt              \
tk-dev             \
zlib1g-dev

# Download and install Python 2.7.11 in a directory separate from regular Python
wget https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz
tar xfz Python-2.7.11.tgz
cd Python-2.7.11/
./configure --prefix /usr/local/lib/python2.7.11 --enable-ipv6
make
sudo make install

# Assure that the python 2.7.11 installation worked correct
PYTHON_VERSION=$(/usr/local/lib/python2.7.11/bin/python -V 2>&1)
if [ "$PYTHON_VERSION" = "Python 2.7.11" ]; then
    echo "Python was installed correctly"
else
    echo "Python install failed for some reason"
fi


#####################################
# Import/create project from/to Git #
#####################################
cd $biocentre_project_dir

echo $(pwd)

# If the project exists, ask for the .git URL and clone
if [[ "$existing_project" == true ]]; then
    echo "Please enter the link to the .git file of the repo:"
    read GIT_URL
    git clone $GIT_URL
    echo "Please enter the name of the repo"
    read repo_name
    cd $repo_name/
    # Check for a non-emtpy .gitignore
    if [ -es .gitignore]; then
        echo ".gitignore file is here and not empty"
    # If there's no proper .gitignore, use the python-.gitignore
    else
        cp "$biocentre_utils_dir/.gitignore" .
    fi
    cd .git
# New project
else
    # Prompt user for repo name, and create repo
    echo "Please enter the name you want to use for the new repo:"
    read REPO_NAME
    git init $REPO_NAME
    cd $REPO_NAME/
    # Use the python-.gitignore
    cp "$biocentre_utils_dir/.gitignore" .
    cd .git
fi

# Check/create the hooks directory for our pre-commit hook
hooks_dir="./hooks"
if [ -d "$hooks_dir" ]; then
    echo "/hook directory already here"
else
    mkdir hooks/
fi

# Add the pre-commit hook
cd hooks/
rm pre-commit.sample
cp "$biocentre_utils_dir/pre-commit" .
# Need to fix this to automatically fix path names for different machines/users
# sed "replaceregexforpathnames"

# - Add .pylintrc file from this repo into the root project directory
cd ../..
echo $(pwd)
# If there's a valid .pylintrc skip
if [ -s .pylintrc ]; then
    echo ".pylintrc file is already here"
# If empty, or not present, use our basic .pylintrc file
else
    cp "$biocentre_utils_dir/.pylintrc" .
fi
# Install basic requirements
if [ -s basic_requirements.txt ]; then
    echo "basic_requirements.txt present"
else
    cp "$biocentre_utils_dir/basic_requirements.txt" .
fi

pip install -r basic_requirements.txt
#TODO: Add jQuery and Bootstrap to this

# - Check for a project_requirements.txt file, to see if the project already has its own required modules
# If that file is empty, we don't run pip
if [ -s project_requirements.txt ]; then
# - Run the project_requirements.txt file if there is any
    pip install -r project_requirements.txt
# Instead of running pip, we'll create the file itself, so everything has the same naming conventions
else
    touch project_requirements.txt
fi

# VCS related things:

########################
# Setting credentials  #
########################

# - Prompt user to enter e-mail and password for git settings, so we can see who commits what
echo "Please enter your e-mail address for git commits:"
read user_email
git config user.email $user_email

# Prompt user real name
echo "Please enter your name:"
read user_name
git config user.name $user_name
